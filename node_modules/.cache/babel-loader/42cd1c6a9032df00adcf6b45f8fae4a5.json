{"ast":null,"code":"'use strict';\n/**\r\n * Expose `arrayFlatten`.\r\n */\n\nmodule.exports = flatten;\nmodule.exports.from = flattenFrom;\nmodule.exports.depth = flattenDepth;\nmodule.exports.fromDepth = flattenFromDepth;\n/**\r\n * Flatten an array.\r\n *\r\n * @param  {Array} array\r\n * @return {Array}\r\n */\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array');\n  }\n\n  return flattenFrom(array);\n}\n/**\r\n * Flatten an array-like structure.\r\n *\r\n * @param  {Array} array\r\n * @return {Array}\r\n */\n\n\nfunction flattenFrom(array) {\n  return flattenDown(array, []);\n}\n/**\r\n * Flatten an array-like structure with depth.\r\n *\r\n * @param  {Array}  array\r\n * @param  {number} depth\r\n * @return {Array}\r\n */\n\n\nfunction flattenDepth(array, depth) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array');\n  }\n\n  return flattenFromDepth(array, depth);\n}\n/**\r\n * Flatten an array-like structure with depth.\r\n *\r\n * @param  {Array}  array\r\n * @param  {number} depth\r\n * @return {Array}\r\n */\n\n\nfunction flattenFromDepth(array, depth) {\n  if (typeof depth !== 'number') {\n    throw new TypeError('Expected the depth to be a number');\n  }\n\n  return flattenDownDepth(array, [], depth);\n}\n/**\r\n * Flatten an array indefinitely.\r\n *\r\n * @param  {Array} array\r\n * @param  {Array} result\r\n * @return {Array}\r\n */\n\n\nfunction flattenDown(array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      flattenDown(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Flatten an array with depth.\r\n *\r\n * @param  {Array}  array\r\n * @param  {Array}  result\r\n * @param  {number} depth\r\n * @return {Array}\r\n */\n\n\nfunction flattenDownDepth(array, result, depth) {\n  depth--;\n\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n\n    if (depth > -1 && Array.isArray(value)) {\n      flattenDownDepth(value, result, depth);\n    } else {\n      result.push(value);\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}