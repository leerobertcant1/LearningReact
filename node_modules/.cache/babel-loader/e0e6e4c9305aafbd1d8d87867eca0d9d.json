{"ast":null,"code":"//Nodejs stuff.\nimport { EventEmitter } from \"events\";\nimport Dispatcher from \"../appDispatcher\";\nimport actionTypes from \"../actions/actionTypes\";\nconst CHANGE_EVENT = \"change\";\nlet _courses = [];\n\nclass CourseStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getCourses() {\n    return _courses;\n  }\n\n  getCourseBySlug(slug) {\n    return _courses.find(c => c.slug === slug);\n  }\n\n}\n\nDispatcher.register(action => {\n  switch (action.actionType) {\n    case actionTypes.CREATE_COURSE:\n      _courses.push(action.course);\n\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_COURSES:\n      _courses = action.courses;\n      store.emitChange();\n      break;\n\n    case actionTypes.DELETE_COURSE:\n      _courses = _courses.filter(course => course.id !== action.id);\n      break;\n\n    case actionTypes.UPDATE_COURSE:\n      _courses = _courses.map(course => course.id === action.course.id ? action.course : course);\n      store.emitChange();\n      break;\n\n    default: //nothing\n\n  }\n});\nconst store = new CourseStore();\nexport default store;","map":{"version":3,"sources":["C:\\Users\\Lee\\Documents\\GitHub\\LearningReact\\src\\stores\\courseStore.js"],"names":["EventEmitter","Dispatcher","actionTypes","CHANGE_EVENT","_courses","CourseStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getCourses","getCourseBySlug","slug","find","c","register","action","actionType","CREATE_COURSE","push","course","store","LOAD_COURSES","courses","DELETE_COURSE","filter","id","UPDATE_COURSE","map"],"mappings":"AAAA;AACA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAMC,WAAN,SAA0BL,YAA1B,CAAuC;AACrCM,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AAC1B,SAAKC,EAAL,CAAQL,YAAR,EAAsBI,QAAtB;AACD;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC7B,SAAKG,cAAL,CAAoBP,YAApB,EAAkCI,QAAlC;AACD;;AAEDI,EAAAA,UAAU,GAAG;AACX,SAAKC,IAAL,CAAUT,YAAV;AACD;;AAEDU,EAAAA,UAAU,GAAG;AACX,WAAOT,QAAP;AACD;;AAEDU,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB,WAAOX,QAAQ,CAACY,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACF,IAAF,KAAWA,IAA9B,CAAP;AACD;;AAnBoC;;AAsBvCd,UAAU,CAACiB,QAAX,CAAoBC,MAAM,IAAI;AAC5B,UAAQA,MAAM,CAACC,UAAf;AACE,SAAKlB,WAAW,CAACmB,aAAjB;AACEjB,MAAAA,QAAQ,CAACkB,IAAT,CAAcH,MAAM,CAACI,MAArB;;AACAC,MAAAA,KAAK,CAACb,UAAN;AACA;;AACF,SAAKT,WAAW,CAACuB,YAAjB;AACErB,MAAAA,QAAQ,GAAGe,MAAM,CAACO,OAAlB;AACAF,MAAAA,KAAK,CAACb,UAAN;AACA;;AACF,SAAKT,WAAW,CAACyB,aAAjB;AACEvB,MAAAA,QAAQ,GAAGA,QAAQ,CAACwB,MAAT,CAAgBL,MAAM,IAAIA,MAAM,CAACM,EAAP,KAAcV,MAAM,CAACU,EAA/C,CAAX;AACA;;AACF,SAAK3B,WAAW,CAAC4B,aAAjB;AACE1B,MAAAA,QAAQ,GAAGA,QAAQ,CAAC2B,GAAT,CAAaR,MAAM,IAC5BA,MAAM,CAACM,EAAP,KAAcV,MAAM,CAACI,MAAP,CAAcM,EAA5B,GAAiCV,MAAM,CAACI,MAAxC,GAAiDA,MADxC,CAAX;AAGAC,MAAAA,KAAK,CAACb,UAAN;AACA;;AACF,YAlBF,CAmBE;;AAnBF;AAqBD,CAtBD;AAwBA,MAAMa,KAAK,GAAG,IAAInB,WAAJ,EAAd;AACA,eAAemB,KAAf","sourcesContent":["//Nodejs stuff.\r\nimport { EventEmitter } from \"events\";\r\nimport Dispatcher from \"../appDispatcher\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\n\r\nconst CHANGE_EVENT = \"change\";\r\nlet _courses = [];\r\n\r\nclass CourseStore extends EventEmitter {\r\n  addChangeListener(callback) {\r\n    this.on(CHANGE_EVENT, callback);\r\n  }\r\n\r\n  removeChangeListener(callback) {\r\n    this.removeListener(CHANGE_EVENT, callback);\r\n  }\r\n\r\n  emitChange() {\r\n    this.emit(CHANGE_EVENT);\r\n  }\r\n\r\n  getCourses() {\r\n    return _courses;\r\n  }\r\n\r\n  getCourseBySlug(slug) {\r\n    return _courses.find(c => c.slug === slug);\r\n  }\r\n}\r\n\r\nDispatcher.register(action => {\r\n  switch (action.actionType) {\r\n    case actionTypes.CREATE_COURSE:\r\n      _courses.push(action.course);\r\n      store.emitChange();\r\n      break;\r\n    case actionTypes.LOAD_COURSES:\r\n      _courses = action.courses;\r\n      store.emitChange();\r\n      break;\r\n    case actionTypes.DELETE_COURSE:\r\n      _courses = _courses.filter(course => course.id !== action.id);\r\n      break;\r\n    case actionTypes.UPDATE_COURSE:\r\n      _courses = _courses.map(course =>\r\n        course.id === action.course.id ? action.course : course\r\n      );\r\n      store.emitChange();\r\n      break;\r\n    default:\r\n    //nothing\r\n  }\r\n});\r\n\r\nconst store = new CourseStore();\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}